#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('express:server');
var http = require('http');
var socket = require('socket.io');



/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
var io=socket(server);

var user_controller = require('../controllers/user_controller');
user_controller.get_io(io);
io.on('connection',function(socket){


  console.log('connected')
  socket.on('add_user',function(data){
  user_controller.add_user(data,socket);


  });

 socket.on('get_users',function(data){
   let names=user_controller.get_users(data.name,socket);
   console.log("names")
   console.log(names)

 });


    socket.on('get_inbox',function(data){
      user_controller.inbox(data,socket);
    })

  socket.on('message',function(data){
       user_controller.message(data,socket)



   });

   socket.on('msg_read',function(data){
     user_controller.read_msg(data)
   });


   socket.on('get_notification',function(data){
     user_controller.get_notification(data,socket)
   });
   socket.on('read_notification',function(data){
     user_controller.read_msg(data,socket)
   })
   socket.on('inbox_id',function(data){
     user_controller.inbox_id(data,socket);
   })

   socket.on('get_messages',function(data){
     console.log("64:"+data.inbox_id)
     user_controller.get_messages(data.inbox_id,socket)
   })

   socket.on('disconnection',function(data){
     let msg= data.name +'  leaved the  chat';
     user_controller.del_user(data.name);

     socket.broadcast.emit('leave',{name:data.name,msg:msg});

   })
});


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
